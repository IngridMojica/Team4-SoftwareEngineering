# Team 4 – Software Engineering Class Project

This repository contains both database and UDP messaging modules for Team 4’s class project.

---

## Team Members

| Real Name         | GitHub Username      |
|-------------------|---------------------|
| Ruben Priest      | ruben-priest        |
| Tyler Bean        | FreezyMK1           |
| Timothy Shtunyuk  | tshtu21             |
| Diego Peredo      |                     |
| Ingrid Mojica     | IngridMojica        |

---

## Project Structure

### Database Section

- `db_players.py`: Database helper functions using `psycopg2` and parameterized queries.
- `test_players.py`: Script to verify player insertions and codename lookups.
- `install.sh`: Helper to create a Python virtual environment and install `psycopg2-binary`.

### UDP Networking Section

- `udp_broadcast.py`: Functions for sending equipment IDs, hit events, and special codes.
- `udp_receiver.py`: Contains `Receiver` class and functions for starting, stopping, and retrieving UDP messages.

---

## Installation & Environment Setup

**Database setup:**

1. Create and activate a virtual environment:
    ```
    python -m venv .venv
    . .venv/bin/activate
    ```
2. Install dependencies:
    ```
    python -m pip install --upgrade pip
    python -m pip install psycopg2-binary
    ```

Alternatively, run the following inside a virtual environment:

bash install.sh

---

## Usage

### Database Functions

1. **Activate the environment:**
    ```
    . .venv/bin/activate
    ```
2. **Run the test script to ensure the database is responding:**
    ```
    python test_db_players.py
    ```
    **Expected example output:**
    ```
    Insert first player: True
    Insert second player: True
    Inserting a duplicate id & name: False
    Inserting a duplicate id: False
    Inserting a duplicate name: True
    Lookup existing codename: Frank
    Lookup non-existing codename: None
    ```

3. **NOTES**
    ***If the above is outputted, then the database is correctly connected and working.***
    ***Meaning, each function within db_players.py is working as intended independent of the ui.***

---

### UDP Messaging

1. **Start receiver (terminal A):**
    ```
    python udp_receiver.py
    ```
2. **Send broadcast messages (terminal B):**
    ```
    python udp_broadcast.py
    ```

---

## Database Verification in psql

- **Describe the table:**
    ```
    psql -d photon -U student -h 127.0.0.1 -c "\d players"
    ```
- **View all player entries:**
    ```
    psql -d photon -U student -h 127.0.0.1 -c "SELECT id, codename FROM players ORDER BY id;"
    ```
- **Delete a test row (example id: 501):**
    ```
    psql -d photon -U student -h 127.0.0.1 -c "DELETE FROM players WHERE id = 501;"
    ```

---

## UDP Ports, Addresses & Message Formats

- **Send (outgoing/game server):** `127.0.0.1:7500`
- **Receive (events):** bind to `0.0.0.0:7501`

**Message formats:**
- Incoming: `"attacker:hit"` (example: `12:34`) and sometimes a single integer.
- Reply/outgoing: equipment ID of hit player (single integer string, e.g. `"34"`).
- Special codes:
    - **202** = start  
    - **221** = game end (send `221` three times)

---

## Running the Main Application

Use the following command depending on your Python setup:

python main.py
or

python3 main.py

text
(Choose whichever works on your system.)

*All commands and procedures in this README can be copy-pasted in your terminal or environment for setup and troubleshooting.*